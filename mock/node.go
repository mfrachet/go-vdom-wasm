// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package mock_vn is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_vdom_wasm "github.com/mfrachet/go-vdom-wasm"
	dom "github.com/mfrachet/go-vdom-wasm/dom"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// createElement mocks base method
func (m *MockNode) createElement() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createElement")
}

// createElement indicates an expected call of createElement
func (mr *MockNodeMockRecorder) createElement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createElement", reflect.TypeOf((*MockNode)(nil).createElement))
}

// getElement mocks base method
func (m *MockNode) getElement() *dom.DomElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getElement")
	ret0, _ := ret[0].(*dom.DomElement)
	return ret0
}

// getElement indicates an expected call of getElement
func (mr *MockNodeMockRecorder) getElement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getElement", reflect.TypeOf((*MockNode)(nil).getElement))
}

// hashCode mocks base method
func (m *MockNode) hashCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hashCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// hashCode indicates an expected call of hashCode
func (mr *MockNodeMockRecorder) hashCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hashCode", reflect.TypeOf((*MockNode)(nil).hashCode))
}

// childrenCount mocks base method
func (m *MockNode) childrenCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "childrenCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// childrenCount indicates an expected call of childrenCount
func (mr *MockNodeMockRecorder) childrenCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "childrenCount", reflect.TypeOf((*MockNode)(nil).childrenCount))
}

// getChildren mocks base method
func (m *MockNode) getChildren() go_vdom_wasm.Children {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getChildren")
	ret0, _ := ret[0].(go_vdom_wasm.Children)
	return ret0
}

// getChildren indicates an expected call of getChildren
func (mr *MockNodeMockRecorder) getChildren() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getChildren", reflect.TypeOf((*MockNode)(nil).getChildren))
}

// getText mocks base method
func (m *MockNode) getText() *go_vdom_wasm.TextNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getText")
	ret0, _ := ret[0].(*go_vdom_wasm.TextNode)
	return ret0
}

// getText indicates an expected call of getText
func (mr *MockNodeMockRecorder) getText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getText", reflect.TypeOf((*MockNode)(nil).getText))
}

// isSame mocks base method
func (m *MockNode) isSame(arg0 go_vdom_wasm.Node) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isSame", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isSame indicates an expected call of isSame
func (mr *MockNodeMockRecorder) isSame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSame", reflect.TypeOf((*MockNode)(nil).isSame), arg0)
}
