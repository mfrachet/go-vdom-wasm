// Code generated by MockGen. DO NOT EDIT.
// Source: dom/dom.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	dom "github.com/mfrachet/go-vdom-wasm/dom"
	reflect "reflect"
	js "syscall/js"
)

// MockDomNode is a mock of DomNode interface
type MockDomNode struct {
	ctrl     *gomock.Controller
	recorder *MockDomNodeMockRecorder
}

// MockDomNodeMockRecorder is the mock recorder for MockDomNode
type MockDomNodeMockRecorder struct {
	mock *MockDomNode
}

// NewMockDomNode creates a new mock instance
func NewMockDomNode(ctrl *gomock.Controller) *MockDomNode {
	mock := &MockDomNode{ctrl: ctrl}
	mock.recorder = &MockDomNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDomNode) EXPECT() *MockDomNodeMockRecorder {
	return m.recorder
}

// QuerySelector mocks base method
func (m *MockDomNode) QuerySelector(arg0 string) dom.DomNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySelector", arg0)
	ret0, _ := ret[0].(dom.DomNode)
	return ret0
}

// QuerySelector indicates an expected call of QuerySelector
func (mr *MockDomNodeMockRecorder) QuerySelector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySelector", reflect.TypeOf((*MockDomNode)(nil).QuerySelector), arg0)
}

// AppendChild mocks base method
func (m *MockDomNode) AppendChild(arg0 dom.DomNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendChild", arg0)
}

// AppendChild indicates an expected call of AppendChild
func (mr *MockDomNodeMockRecorder) AppendChild(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendChild", reflect.TypeOf((*MockDomNode)(nil).AppendChild), arg0)
}

// Remove mocks base method
func (m *MockDomNode) Remove() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove")
}

// Remove indicates an expected call of Remove
func (mr *MockDomNodeMockRecorder) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDomNode)(nil).Remove))
}

// ReplaceWith mocks base method
func (m *MockDomNode) ReplaceWith(arg0 dom.DomNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplaceWith", arg0)
}

// ReplaceWith indicates an expected call of ReplaceWith
func (mr *MockDomNodeMockRecorder) ReplaceWith(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWith", reflect.TypeOf((*MockDomNode)(nil).ReplaceWith), arg0)
}

// CreateTextNode mocks base method
func (m *MockDomNode) CreateTextNode(arg0 string) dom.DomNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTextNode", arg0)
	ret0, _ := ret[0].(dom.DomNode)
	return ret0
}

// CreateTextNode indicates an expected call of CreateTextNode
func (mr *MockDomNodeMockRecorder) CreateTextNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextNode", reflect.TypeOf((*MockDomNode)(nil).CreateTextNode), arg0)
}

// CreateElement mocks base method
func (m *MockDomNode) CreateElement(arg0 string) dom.DomNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElement", arg0)
	ret0, _ := ret[0].(dom.DomNode)
	return ret0
}

// CreateElement indicates an expected call of CreateElement
func (mr *MockDomNodeMockRecorder) CreateElement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElement", reflect.TypeOf((*MockDomNode)(nil).CreateElement), arg0)
}

// SetAttribute mocks base method
func (m *MockDomNode) SetAttribute(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAttribute", arg0, arg1)
}

// SetAttribute indicates an expected call of SetAttribute
func (mr *MockDomNodeMockRecorder) SetAttribute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttribute", reflect.TypeOf((*MockDomNode)(nil).SetAttribute), arg0, arg1)
}

// AddEventListener mocks base method
func (m *MockDomNode) AddEventListener(arg0 string, arg1 func([]js.Value)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEventListener", arg0, arg1)
}

// AddEventListener indicates an expected call of AddEventListener
func (mr *MockDomNodeMockRecorder) AddEventListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockDomNode)(nil).AddEventListener), arg0, arg1)
}

// ChildNodes mocks base method
func (m *MockDomNode) ChildNodes(arg0 int) dom.DomNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildNodes", arg0)
	ret0, _ := ret[0].(dom.DomNode)
	return ret0
}

// ChildNodes indicates an expected call of ChildNodes
func (mr *MockDomNodeMockRecorder) ChildNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildNodes", reflect.TypeOf((*MockDomNode)(nil).ChildNodes), arg0)
}

// GetBinding mocks base method
func (m *MockDomNode) GetBinding() js.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinding")
	ret0, _ := ret[0].(js.Value)
	return ret0
}

// GetBinding indicates an expected call of GetBinding
func (mr *MockDomNodeMockRecorder) GetBinding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinding", reflect.TypeOf((*MockDomNode)(nil).GetBinding))
}

// SetBinding mocks base method
func (m *MockDomNode) SetBinding(arg0 js.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBinding", arg0)
}

// SetBinding indicates an expected call of SetBinding
func (mr *MockDomNodeMockRecorder) SetBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBinding", reflect.TypeOf((*MockDomNode)(nil).SetBinding), arg0)
}
